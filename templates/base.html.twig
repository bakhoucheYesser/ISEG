<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}ISEG - Gestion Ã‰tudiants{% endblock %}</title>

    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>ðŸŽ“</text></svg>">

    <!-- Tailwind CSS via PostCSS (Production ready) -->
    {% block stylesheets %}
    {% endblock %}

    <!-- Custom CSS for ISEG branding -->
    <style>
        /* Ensure ISEG color classes work */
        .text-iseg-gold-200 {
            color: var(--iseg-gold-200);
        }
        .text-iseg-gold-300 {
            color: var(--iseg-gold-300);
        }
        .bg-iseg-navy-900 {
            background-color: var(--iseg-navy-900);
        }
        .bg-iseg-navy-800 {
            background-color: var(--iseg-navy-800);
        }
        .bg-iseg-navy-700 {
            background-color: var(--iseg-navy-700);
        }
        .hover\:text-iseg-gold-300:hover {
            color: var(--iseg-gold-300);
        }
        .hover\:bg-iseg-navy-700:hover {
            background-color: var(--iseg-navy-700);
        }
        .hover\:bg-iseg-navy-800:hover {
            background-color: var(--iseg-navy-800);
        }
        .focus\:ring-iseg-gold-500:focus {
            --tw-ring-color: var(--iseg-gold-500);
        }
    </style>
</head>

<body class="bg-gray-50 font-sans antialiased min-h-screen flex flex-col" data-turbo-suppress-warning>
<!-- Loading Spinner -->
{#<div id="loading-spinner" class="fixed inset-0 bg-white/80 backdrop-blur-sm z-50 flex items-center justify-center hidden">#}
{#    <div class="text-center">#}
{#        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>#}
{#        <p class="text-blue-700 font-medium">Chargement...</p>#}
{#    </div>#}
{#</div>#}

<!-- Navigation principale avec la nouvelle navbar -->
{{ include('components/_navbar.html.twig') }}

<!-- Main content -->
<div class="flex-grow">
    <!-- Main content with consistent spacing -->
    <main class="pt-20 pb-12">
        <div class="content-container">
            <!-- Flash messages intÃ©grÃ©s dans le contenu -->
            {{ include('components/_flash_messages.html.twig') }}

            <div class="main-content">
                {% block content %}{% endblock %}
            </div>
        </div>
    </main>
</div>

<!-- Footer -->
{{ include('components/_footer.html.twig') }}

<!-- Scripts -->
{% block javascripts %}
    {{ importmap('app') }}
{% endblock %}

<!-- Enhanced JavaScript for better UX -->
<script>
    // Global ISEG utilities
    window.ISEG = window.ISEG || {};

    // Enhanced loading spinner management - VERSION CORRIGÃ‰E
    document.addEventListener('DOMContentLoaded', function() {
        const spinner = document.getElementById('loading-spinner');

        if (spinner) {
            // Force hide spinner on page load
            spinner.classList.add('hidden');

            // Fonction pour cacher le spinner
            function hideSpinner() {
                if (spinner) {
                    spinner.classList.add('hidden');
                }
            }

            // Fonction pour montrer le spinner
            function showSpinner() {
                if (spinner) {
                    spinner.classList.remove('hidden');
                }
            }

            // Show spinner on form submissions (except search forms)
            document.addEventListener('submit', function(e) {
                if (!e.target.classList.contains('no-spinner') &&
                    !e.target.closest('.search-form') &&
                    !e.target.classList.contains('flash-message')) {
                    showSpinner();

                    // Fallback: hide after 10 seconds max
                    setTimeout(hideSpinner, 10000);
                }
            });

            // Show spinner on navigation links (avec dÃ©lai plus court)
            document.addEventListener('click', function(e) {
                const link = e.target.closest('a[href]');
                if (link &&
                    !link.hasAttribute('data-no-spinner') &&
                    !link.href.includes('#') &&
                    !link.href.includes('javascript:') &&
                    !link.classList.contains('dropdown-link') &&
                    !link.closest('.flash-message')) {

                    // DÃ©lai plus court pour les liens
                    setTimeout(() => {
                        showSpinner();
                        // Fallback: hide after 5 seconds for links
                        setTimeout(hideSpinner, 5000);
                    }, 50);
                }
            });

            // Hide spinner events (multiple fallbacks)
            window.addEventListener('load', hideSpinner);
            window.addEventListener('pageshow', hideSpinner);
            document.addEventListener('DOMContentLoaded', hideSpinner);

            // Turbo integration avec fallbacks
            document.addEventListener('turbo:submit-start', () => {
                showSpinner();
                setTimeout(hideSpinner, 8000); // Fallback
            });

            document.addEventListener('turbo:submit-end', hideSpinner);
            document.addEventListener('turbo:visit', () => {
                showSpinner();
                setTimeout(hideSpinner, 5000); // Fallback
            });

            document.addEventListener('turbo:load', hideSpinner);
            document.addEventListener('turbo:render', hideSpinner);

            // Force hide spinner after any AJAX or fetch
            const originalFetch = window.fetch;
            window.fetch = function(...args) {
                return originalFetch.apply(this, args).finally(() => {
                    setTimeout(hideSpinner, 100);
                });
            };

            // Emergency fallback: hide spinner after 3 seconds on any user interaction
            let emergencyTimer;
            document.addEventListener('click', function() {
                clearTimeout(emergencyTimer);
                emergencyTimer = setTimeout(hideSpinner, 3000);
            });

            // Hide spinner when user presses Escape
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    hideSpinner();
                }
            });

            console.log('âœ… Enhanced spinner management loaded with fallbacks');
        }
    });

    // Mobile menu functionality
    document.addEventListener('DOMContentLoaded', function() {
        const mobileMenuButton = document.getElementById('mobile-menu-button');
        const mobileMenu = document.getElementById('mobile-menu');

        if (mobileMenuButton && mobileMenu) {
            mobileMenuButton.addEventListener('click', function() {
                mobileMenu.classList.toggle('hidden');

                // Update button icon
                const icon = this.querySelector('svg path');
                if (mobileMenu.classList.contains('hidden')) {
                    icon.setAttribute('d', 'M4 6h16M4 12h16M4 18h16');
                } else {
                    icon.setAttribute('d', 'M6 18L18 6M6 6l12 12');
                }
            });

            // Close mobile menu when clicking outside
            document.addEventListener('click', function(e) {
                if (!mobileMenuButton.contains(e.target) && !mobileMenu.contains(e.target)) {
                    mobileMenu.classList.add('hidden');
                    const icon = mobileMenuButton.querySelector('svg path');
                    icon.setAttribute('d', 'M4 6h16M4 12h16M4 18h16');
                }
            });
        }
    });

    // Confirmation for logout and destructive actions
    document.addEventListener('click', function(e) {
        const link = e.target.closest('a[data-confirm]');
        if (link) {
            const message = link.getAttribute('data-confirm');
            if (!confirm(message)) {
                e.preventDefault();
                return false;
            }
        }
    });

    // Enhanced form validation with ISEG styling
    document.addEventListener('DOMContentLoaded', function() {
        // Form validation
        const forms = document.querySelectorAll('form[data-validate]');
        forms.forEach(form => {
            const inputs = form.querySelectorAll('input[required], select[required], textarea[required]');

            form.addEventListener('submit', function(e) {
                let isValid = true;
                inputs.forEach(input => {
                    if (!input.value.trim()) {
                        isValid = false;
                        showFieldError(input, 'Ce champ est obligatoire');
                    } else {
                        clearFieldError(input);
                    }
                });

                if (!isValid) {
                    e.preventDefault();
                    window.ISEG.toast('Veuillez corriger les erreurs dans le formulaire', 'error');
                }
            });
        });
    });

    function showFieldError(field, message) {
        clearFieldError(field);
        field.classList.add('border-red-500');
        field.classList.remove('border-gray-300');

        const error = document.createElement('div');
        error.className = 'field-error text-red-600 text-sm mt-1';
        error.textContent = message;
        field.parentNode.appendChild(error);
    }

    function clearFieldError(field) {
        field.classList.remove('border-red-500');
        field.classList.add('border-gray-300');

        const existingError = field.parentNode.querySelector('.field-error');
        if (existingError) {
            existingError.remove();
        }
    }

    // Utility functions
    Object.assign(window.ISEG, {
        // Format currency in Tunisian Dinar
        formatCurrency: function(amount) {
            return new Intl.NumberFormat('fr-TN', {
                style: 'currency',
                currency: 'TND',
                minimumFractionDigits: 0
            }).format(amount);
        },

        // Format date in French
        formatDate: function(date) {
            return new Intl.DateTimeFormat('fr-FR', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric'
            }).format(new Date(date));
        },

        // Show toast notification
        toast: function(message, type = 'info', duration = 5000) {
            const toast = document.createElement('div');
            toast.className = `fixed top-24 right-4 z-50 max-w-sm bg-white rounded-lg shadow-lg border-l-4 p-4 animate-fade-in ${
                type === 'success' ? 'border-green-500' :
                    type === 'error' ? 'border-red-500' :
                        type === 'warning' ? 'border-yellow-500' : 'border-blue-500'
            }`;

            toast.innerHTML = `
                    <div class="flex items-start">
                        <div class="flex-shrink-0">
                            <div class="rounded-full p-1 ${
                type === 'success' ? 'bg-green-100' :
                    type === 'error' ? 'bg-red-100' :
                        type === 'warning' ? 'bg-yellow-100' : 'bg-blue-100'
            }">
                                <svg class="w-4 h-4 ${
                type === 'success' ? 'text-green-600' :
                    type === 'error' ? 'text-red-600' :
                        type === 'warning' ? 'text-yellow-600' : 'text-blue-600'
            }" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    ${type === 'success' ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>' :
                type === 'error' ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>' :
                    type === 'warning' ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>' :
                        '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>'}
                                </svg>
                            </div>
                        </div>
                        <div class="ml-3 flex-1">
                            <p class="text-sm font-medium text-gray-900">${message}</p>
                        </div>
                        <button onclick="this.parentElement.parentElement.remove()" class="ml-4 text-gray-400 hover:text-gray-600">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                `;

            document.body.appendChild(toast);

            // Auto remove
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.style.opacity = '0';
                    toast.style.transform = 'translateX(100%)';
                    setTimeout(() => toast.remove(), 300);
                }
            }, duration);

            return toast;
        },

        // Confirm with better styling
        confirm: function(message, title = 'Confirmation') {
            return confirm(`${title}\n\n${message}`);
        }
    });

    // Global error handling
    window.addEventListener('error', function(e) {
        console.error('Application error:', e.error);
        if (window.ISEG && window.ISEG.toast) {
            window.ISEG.toast('Une erreur inattendue s\'est produite', 'error');
        }
    });

    // Performance monitoring (dev only)
    {% if app.environment == 'dev' %}
    if ('performance' in window) {
        window.addEventListener('load', function() {
            setTimeout(function() {
                const timing = performance.timing;
                const loadTime = timing.loadEventEnd - timing.navigationStart;
                console.log(`%câš¡ Page loaded in ${loadTime}ms`, 'color: #10b981; font-weight: bold');
            }, 100);
        });
    }
    {% endif %}
</script>
</body>
</html>
