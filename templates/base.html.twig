<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="{% block meta_description %}Système de gestion des étudiants et paiements - Institut des Sciences Économiques et de Gestion{% endblock %}">
    <meta name="author" content="ISEG Tunis">

    <title>{% block title %}ISEG{% endblock %} - Institut des Sciences Économiques et de Gestion</title>

    <!-- Favicon -->
    <link rel="icon" type="image/png" sizes="32x32" href="{{ asset('images/favicon-32x32.png') }}">
    <link rel="icon" type="image/png" sizes="16x16" href="{{ asset('images/favicon-16x16.png') }}">

    <!-- CSS -->
    {% block stylesheets %}
        {{ encore_entry_link_tags('app') }}
        <!-- Tailwind CSS -->
        <script src="https://cdn.tailwindcss.com"></script>
        <script>
            tailwind.config = {
                theme: {
                    extend: {
                        colors: {
                            'iseg-navy': {
                                50: '#f0f4ff',
                                100: '#e0e7ff',
                                200: '#c7d2fe',
                                300: '#a5b4fc',
                                400: '#818cf8',
                                500: '#6366f1',
                                600: '#4f46e5',
                                700: '#4338ca',
                                800: '#3730a3',
                                900: '#312e81',
                                950: '#1e1b4b'
                            },
                            'iseg-gold': {
                                50: '#fffbeb',
                                100: '#fef3c7',
                                200: '#fde68a',
                                300: '#fcd34d',
                                400: '#fbbf24',
                                500: '#f59e0b',
                                600: '#d97706',
                                700: '#b45309',
                                800: '#92400e',
                                900: '#78350f',
                                950: '#451a03'
                            },
                            'iseg-blue': {
                                50: '#eff6ff',
                                100: '#dbeafe',
                                200: '#bfdbfe',
                                300: '#93c5fd',
                                400: '#60a5fa',
                                500: '#3b82f6',
                                600: '#2563eb',
                                700: '#1d4ed8',
                                800: '#1e40af',
                                900: '#1e3a8a',
                                950: '#172554'
                            }
                        },
                        fontFamily: {
                            'sans': ['Inter', 'system-ui', 'sans-serif'],
                        }
                    }
                }
            }
        </script>
        <!-- Google Fonts -->
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
        <!-- Custom CSS -->
        <style>
            .iseg-gradient {
                background: linear-gradient(135deg, #312e81 0%, #4f46e5 50%, #f59e0b 100%);
            }
            .iseg-shadow {
                box-shadow: 0 10px 25px -5px rgba(49, 46, 129, 0.1), 0 10px 10px -5px rgba(49, 46, 129, 0.04);
            }
            .loading {
                animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
            }
        </style>
    {% endblock %}
</head>

<body class="bg-gray-50 font-sans antialiased min-h-screen">
{% block body %}
    <!-- Loading Spinner (masqué par défaut) -->
    <div id="loading-spinner" class="fixed inset-0 bg-white/80 backdrop-blur-sm z-50 flex items-center justify-center hidden">
        <div class="text-center">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-iseg-navy-900 mx-auto mb-4"></div>
            <p class="text-iseg-navy-700 font-medium">Chargement...</p>
        </div>
    </div>

    <!-- Navigation principale -->
    {% if app.user %}
        {% include 'components/_navbar.html.twig' %}
    {% endif %}

    <!-- Alertes Flash -->
    {% include 'components/_flash_messages.html.twig' %}

    <!-- Contenu principal -->
    <main class="{% if app.user %}pt-16{% endif %}">
        {% block main_content %}
            <div class="container mx-auto px-4 py-8">
                <div class="max-w-7xl mx-auto">
                    {% block content %}{% endblock %}
                </div>
            </div>
        {% endblock %}
    </main>

    <!-- Footer -->
    {% if app.user %}
        {% include 'components/_footer.html.twig' %}
    {% endif %}

    <!-- Modal Container -->
    <div id="modal-container"></div>

    <!-- Confirmation Dialog -->
    <div id="confirmation-dialog" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
                <div class="p-6">
                    <div class="flex items-center mb-4">
                        <div class="bg-yellow-100 rounded-full p-2 mr-3">
                            <svg class="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                            </svg>
                        </div>
                        <h3 class="text-lg font-semibold text-iseg-navy-900" id="confirmation-title">Confirmation</h3>
                    </div>
                    <p class="text-gray-600 mb-6" id="confirmation-message">Êtes-vous sûr de vouloir effectuer cette action ?</p>
                    <div class="flex justify-end space-x-3">
                        <button id="confirmation-cancel" class="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
                            Annuler
                        </button>
                        <button id="confirmation-confirm" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
                            Confirmer
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

<!-- JavaScript -->
{% block javascripts %}
    {{ encore_entry_script_tags('app') }}

    <!-- Scripts utilitaires ISEG -->
    <script>
        // Configuration globale ISEG
        window.ISEG = {
            baseUrl: '{{ app.request.schemeAndHttpHost }}',
            locale: '{{ app.request.locale }}',
            csrf: '{{ csrf_token('global') }}',
            user: {{ app.user ? {
                id: app.user.id,
                login: app.user.login,
                role: app.user.role,
                fullName: app.user.fullName
            } | json_encode : null }}
        };

        // Utilitaires généraux
        class ISEGUtils {
            // Afficher le spinner de chargement
            static showLoading() {
                document.getElementById('loading-spinner').classList.remove('hidden');
            }

            // Masquer le spinner de chargement
            static hideLoading() {
                document.getElementById('loading-spinner').classList.add('hidden');
            }

            // Afficher une notification toast
            static showToast(message, type = 'info', duration = 5000) {
                const colors = {
                    success: 'bg-green-500',
                    error: 'bg-red-500',
                    warning: 'bg-yellow-500',
                    info: 'bg-iseg-blue-500'
                };

                const toast = document.createElement('div');
                toast.className = `fixed top-20 right-4 ${colors[type]} text-white px-6 py-3 rounded-lg shadow-lg z-50 transform translate-x-full transition-transform duration-300`;
                toast.innerHTML = `
                        <div class="flex items-center space-x-2">
                            <span>${message}</span>
                            <button onclick="this.parentElement.parentElement.remove()" class="ml-2 text-white/80 hover:text-white">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                </svg>
                            </button>
                        </div>
                    `;

                document.body.appendChild(toast);

                // Animer l'entrée
                setTimeout(() => toast.classList.remove('translate-x-full'), 100);

                // Auto-suppression
                setTimeout(() => {
                    toast.classList.add('translate-x-full');
                    setTimeout(() => toast.remove(), 300);
                }, duration);
            }

            // Dialogue de confirmation
            static confirm(title, message, onConfirm, confirmText = 'Confirmer', cancelText = 'Annuler') {
                const dialog = document.getElementById('confirmation-dialog');
                const titleEl = document.getElementById('confirmation-title');
                const messageEl = document.getElementById('confirmation-message');
                const confirmBtn = document.getElementById('confirmation-confirm');
                const cancelBtn = document.getElementById('confirmation-cancel');

                titleEl.textContent = title;
                messageEl.textContent = message;
                confirmBtn.textContent = confirmText;
                cancelBtn.textContent = cancelText;

                dialog.classList.remove('hidden');

                // Gestionnaires d'événements
                const handleConfirm = () => {
                    dialog.classList.add('hidden');
                    onConfirm();
                    cleanup();
                };

                const handleCancel = () => {
                    dialog.classList.add('hidden');
                    cleanup();
                };

                const cleanup = () => {
                    confirmBtn.removeEventListener('click', handleConfirm);
                    cancelBtn.removeEventListener('click', handleCancel);
                };

                confirmBtn.addEventListener('click', handleConfirm);
                cancelBtn.addEventListener('click', handleCancel);

                // Fermer avec Échap
                const handleEscape = (e) => {
                    if (e.key === 'Escape') {
                        handleCancel();
                        document.removeEventListener('keydown', handleEscape);
                    }
                };
                document.addEventListener('keydown', handleEscape);
            }

            // Formater les montants en dinars tunisiens
            static formatCurrency(amount) {
                return new Intl.NumberFormat('fr-TN', {
                    style: 'currency',
                    currency: 'TND'
                }).format(amount);
            }

            // Formater les dates
            static formatDate(date, locale = 'fr-FR') {
                return new Intl.DateTimeFormat(locale, {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                }).format(new Date(date));
            }

            // Requête AJAX avec gestion d'erreurs
            static async apiCall(url, options = {}) {
                this.showLoading();

                try {
                    const response = await fetch(url, {
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest',
                            'X-CSRF-Token': window.ISEG.csrf,
                            ...options.headers
                        },
                        ...options
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }

                    return await response.json();
                } catch (error) {
                    this.showToast('Erreur de connexion: ' + error.message, 'error');
                    throw error;
                } finally {
                    this.hideLoading();
                }
            }
        }

        // Initialisation globale
        document.addEventListener('DOMContentLoaded', function() {
            // Auto-masquer les alertes flash après 5 secondes
            document.querySelectorAll('.flash-message').forEach(alert => {
                setTimeout(() => {
                    alert.style.opacity = '0';
                    setTimeout(() => alert.remove(), 300);
                }, 5000);
            });

            // Gestionnaire global pour les liens de confirmation
            document.addEventListener('click', function(e) {
                const target = e.target.closest('[data-confirm]');
                if (target) {
                    e.preventDefault();
                    const message = target.dataset.confirm;
                    const href = target.href || target.dataset.href;

                    ISEGUtils.confirm('Confirmation', message, () => {
                        if (href) {
                            window.location.href = href;
                        } else if (target.form) {
                            target.form.submit();
                        }
                    });
                }
            });

            // Session timeout warning (7h45min = 27900000ms pour avertir 15min avant expiration)
            {% if app.user %}
            setTimeout(() => {
                ISEGUtils.showToast('Votre session expirera dans 15 minutes. Cliquez pour prolonger.', 'warning', 15000);
            }, 27900000);
            {% endif %}
        });

        // Rendre ISEGUtils disponible globalement
        window.ISEGUtils = ISEGUtils;
    </script>

    {% block extra_javascripts %}{% endblock %}
{% endblock %}
</body>
</html>
